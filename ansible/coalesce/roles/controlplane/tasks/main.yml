- name: Create directories if they don't exist
  file:
    path: "{{ item }}"
    state: directory
    owner: rke2
    mode: "0755"
    recurse: yes
  loop:
    - "{{ CONFDIR }}"
    - "{{ WATCHDIR }}"
    - "{{ NETWORKDIR }}"

- name: Get hostname short
  shell: |
    hostname -s
  register: hostname_short
  changed_when: false

- name: Get hostname fqdn
  shell: |
    hostname -f
  register: hostname_fqdn
  changed_when: false

- name: Print hostname fqdn and short
  debug:
    msg:
      - "hostname short '{{ hostname_short.stdout }}'"
      - "hostname fqdn: '{{ hostname_fqdn.stdout }}'"

- name: Create config.yaml on initial controlplane
  copy:
    dest: "{{ CONFFILE }}"
    mode: "0644"
    content: |
      tls-san:
        - "{{ hostname_short.stdout }}"
        - "{{ hostname_fqdn.stdout }}"
        - "{{ SERVER_ADDRESS_SHORT }}"
        - "{{ SERVER_ADDRESS_FQDN }}"
        - "{{ SERVER_FAILOVER_IP }}"
      write-kubeconfig-mode: 0644
  when: ansible_hostname == groups['controlplane'][0]

- name: Install rke2 server
  shell: |
    set -o pipefail && curl -sfL https://get.rke2.io | INSTALL_RKE2_VERSION="{{ INSTALL_RKE2_VERSION }}" sh -
  register: rke2_output
  changed_when: rke2_output.rc == 0

- name: Ensure rke2-server is enabled and running on first
  systemd:
    state: started
    enabled: true
    name: rke2-server
  when: ansible_hostname == groups['controlplane'][0]

- name: Ensure containerd is enabled and running
  systemd:
    state: started
    enabled: true
    name: containerd

- name: Add rke2 dir to PATH
  copy:
    dest: /etc/profile.d/custom-path.sh
    content: 'PATH=$PATH:/var/lib/rancher/rke2/bin'
    mode: "0755"

- name: Obtain kubeconfig
  ansible.builtin.fetch:
    src: /etc/rancher/rke2/rke2.yaml
    dest: autogenerated/rke2-localhost.yaml
    flat: yes
  when: ansible_hostname == groups['controlplane'][0]

- name: Obtain node_token
  ansible.builtin.slurp:
    src: /var/lib/rancher/rke2/server/node-token
  register: nodetoken
  when: ansible_hostname == groups['controlplane'][0]

- name: Decode and clean up node_token
  set_fact:
    node_token: "{{ nodetoken['content'] | b64decode | regex_replace('\\n', '') }}"
  when: ansible_hostname == groups['controlplane'][0]
    # node_token: "{{ hostvars[groups['controlplane'][0]]['node_token'] | b64decode | regex_replace('\\n', '') }}"
  # register: node_token

- name: Get TOKEN from first controlplane
  set_fact:
    node_token: "{{ hostvars[groups['controlplane'][0]].node_token }}"

- name: Create config.yaml on other controlplanes with node_token
  copy:
    dest: "{{ CONFFILE }}"
    mode: "0644"
    content: |
      token: {{ node_token }}
      server: https://{{ SERVER_ADDRESS_FQDN }}:9345
      tls-san:
        - "{{ hostname_short.stdout }}"
        - "{{ hostname_fqdn.stdout }}"
        - "{{ SERVER_ADDRESS_SHORT }}"
        - "{{ SERVER_ADDRESS_FQDN }}"
        - "{{ SERVER_FAILOVER_IP }}"
      write-kubeconfig-mode: 0644
  when: ansible_hostname != groups['controlplane'][0]

- name: Download kube-vip RBAC file
  get_url:
    url: https://kube-vip.io/manifests/rbac.yaml
    dest: "{{ WATCHDIR }}/kube-vip-rbac.yaml"
    owner: rke2
    mode: "0644"
  when: ansible_hostname == groups['controlplane'][0]

- name: Deploy kube-vip
  shell: |
    set -o pipefail
    /var/lib/rancher/rke2/bin/ctr --namespace k8s.io image pull "{{ KUBE_VIP_IMAGE }}":"{{ KUBE_VIP_IMAGE_TAG }}"
    /var/lib/rancher/rke2/bin/ctr --namespace k8s.io run --rm --net-host "{{ KUBE_VIP_IMAGE }}":"{{ KUBE_VIP_IMAGE_TAG }}" vip /kube-vip \
    manifest daemonset \
    --arp \
    --interface "{{ INTERFACE }}" \
    --address "{{ VIP }}" \
    --controlplane \
    --leaderElection \
    --taint \
    --services \
    --inCluster | tee "{{ WATCHDIR }}/kube-vip.yaml"
  register: vip_output
  changed_when: vip_output == 0
  when: ansible_hostname == groups['controlplane'][0]

- name: Download metallb-native
  get_url:
    url: https://raw.githubusercontent.com/metallb/metallb/{{ METALLB_IMAGE_TAG }}/config/manifests/metallb-native.yaml
    dest: "{{ WATCHDIR }}/metallb-native.yaml"
    owner: rke2
    mode: "0644"
  when: ansible_hostname == groups['controlplane'][0]

- name: Create ipaddresspool.yaml
  copy:
    dest: "{{ WATCHDIR }}/ipaddresspool.yaml"
    owner: rke2
    mode: "0644"
    content: |
      apiVersion: metallb.io/v1beta1
      kind: IPAddressPool
      metadata:
        name: metallb-address-pool
        namespace: metallb-system
      spec:
        addresses:
        - {{ METALLB_IP_RANGE }}
      ---
      apiVersion: metallb.io/v1beta1
      kind: L2Advertisement
      metadata:
        name: metallb-advertisement
        namespace: metallb-system
      spec:
        ipAddressPools:
        - metallb-address-pool
  when: ansible_hostname == groups['controlplane'][0]

- name: Download cert-manager
  get_url:
    url: https://github.com/cert-manager/cert-manager/releases/download/{{ CERT_MANAGER_IMAGE_TAG }}/cert-manager.yaml
    dest: "{{ WATCHDIR }}/cert-manager.yaml"
    owner: rke2
    mode: "0644"
  when: ansible_hostname == groups['controlplane'][0]

- name: Deploy Traefik
  template:
    src: traefik.yaml.j2
    dest: "{{ WATCHDIR }}/traefik.yaml"
    owner: rke2
    mode: "0644"
  when: ansible_hostname == groups['controlplane'][0]

- name: Ensure rke2-server is enabled and running on all controlplane nodes
  systemd:
    state: started
    enabled: true
    name: rke2-server
