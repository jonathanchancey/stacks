---
- name: Validate system architecture and OS
  assert:
    that:
      - ansible_architecture in ['aarch64', 'arm64', 'armv7l']
      - ansible_distribution == 'Debian'
      - ansible_distribution_release == 'bookworm'
    fail_msg: "Host must be ARM architecture running Debian Bookworm"
    success_msg: "Host is running on ARM architecture with Debian Bookworm"

- name: Check and create ansible user
  block:
    - name: Check if ansible user exists
      getent:
        database: passwd
        key: ansible
      register: ansible_user_exists
      failed_when: false
      changed_when: false

    - name: Create ansible user if not exists
      user:
        name: ansible
        state: present
        shell: /bin/bash
        system: true
        create_home: true
        groups: sudo
        password: "!"
      when: ansible_user_exists.failed is defined and ansible_user_exists.failed

    - name: Set up authorized keys for ansible user
      ansible.posix.authorized_key:
        user: ansible
        state: present
        key: "{{ ansible_ssh_public_key }}"
      when: ansible_ssh_public_key is defined

    - name: Configure sudo access for ansible user
      lineinfile:
        path: /etc/sudoers.d/ansible
        line: "ansible ALL=(ALL) NOPASSWD: ALL"
        state: present
        mode: '0440'
        create: yes
        validate: '/usr/sbin/visudo -cf %s'

    - name: Test ansible user sudo access
      command: whoami
      become: true
      become_user: ansible
      register: sudo_test
      changed_when: false
      failed_when: sudo_test.stdout != 'root'

- name: Update ansible_user for subsequent tasks
  set_fact:
    ansible_user: ansible
    ansible_become_user: ansible

- name: Reconnect as ansible user
  meta: reset_connection

- name: Set hostname with padded zeros
  hostname:
    name: "{{ hostname_prefix }}-{{ '%02d' | format(play_hosts.index(inventory_hostname)) }}"

- name: Update /etc/hosts
  lineinfile:
    path: /etc/hosts
    regexp: |
      "^127\.0\.1\.1"
    line: "127.0.1.1 {{ hostname_prefix }}-{{ '%02d' | format(play_hosts.index(inventory_hostname)) }}"
    state: present

- name: Harden SSH configuration
  block:
    - name: Update sshd configuration
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        validate: '/usr/sbin/sshd -t -f %s' # -t test, -f config
      loop:
        - regexp: '^#?PermitRootLogin'
          line: 'PermitRootLogin no'
        - regexp: '^#?PasswordAuthentication'
          line: 'PasswordAuthentication no'
        - regexp: '^#?PubkeyAuthentication'
          line: 'PubkeyAuthentication yes'
        - regexp: '^#?PermitEmptyPasswords'
          line: 'PermitEmptyPasswords no'
        - regexp: '^#?X11Forwarding'
          line: 'X11Forwarding no'
        - regexp: '^#?MaxAuthTries'
          line: 'MaxAuthTries 7'
      notify: Restart sshd

- name: Remove pi user if exists
  block:
    - name: Check if pi user exists
      getent:
        database: passwd
        key: pi
      register: pi_user_exists
      failed_when: false

    - name: Remove pi user and home directory
      user:
        name: pi
        state: absent
        remove: yes
        force: yes
      when: pi_user_exists.rc == 0

- name: Replace apt sources.list
  block:
    - name: Copy new sources.list
      copy:
        src: files/sources.list
        dest: /etc/apt/sources.list
        owner: root
        group: root
        mode: '0644'
        force: true

    - name: Update apt cache
      apt:
        update_cache: yes

- name: Set same timezone
  community.general.timezone:
    name: "{{ system_timezone }}"
  when: system_timezone is defined

# - name: install latest zsh on all hosts
#   hosts: "*"
#   tasks:
#     - name: install zsh
#       apt:
#         name: zsh
#         state: present

- name: Perform dist-upgrade
  apt:
    upgrade: dist
    force_apt_get: yes
    update_cache: true
    autoclean: yes
    autoremove: yes
  register: upgrade_output

- name: Check if reboot is required
  stat:
    path: /var/run/reboot-required
  notify: Reboot system if required
  changed_when: reboot_required.stat.exists
