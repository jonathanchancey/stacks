---
- name: Validate system architecture and OS
  assert:
    that:
      - ansible_architecture in ['aarch64', 'arm64', 'armv7l']
      - ansible_distribution == 'Debian'
      - ansible_distribution_release == 'bookworm'
    fail_msg: "Host must be ARM architecture running Debian Bookworm"
    success_msg: "Host is running on ARM architecture with Debian Bookworm"

- name: Check and create ansible user
  become: true
  become_user: root
  block:
    - name: Create ansible user if not exists
      user:
        name: ansible
        state: present
        shell: /bin/bash
        system: true
        create_home: true
        groups: sudo
        password: "!"

    - name: Set up authorized keys for ansible user
      ansible.posix.authorized_key:
        user: ansible
        state: present
        key: "{{ ansible_ssh_public_key }}"

    - name: Configure sudo access for ansible user
      lineinfile:
        path: /etc/sudoers.d/ansible
        line: "ansible ALL=(ALL) NOPASSWD: ALL"
        state: present
        mode: '0440'
        owner: root
        group: root
        create: yes
        validate: '/usr/sbin/visudo -cf %s'

- name: Test ansible user sudo access
  command: whoami
  become: true
  become_user: ansible
  register: sudo_test
  changed_when: false
  failed_when: sudo_test.stdout != 'root'

- name: Update ansible_user for subsequent tasks
  set_fact:
    ansible_user: ansible
    ansible_become_user: root

- name: Reconnect as ansible user
  meta: reset_connection

- name: Debug system information
  debug:
    msg: "{{ hostname_prefix }}-{{ '%02d' | format(play_hosts.index(inventory_hostname)) }}"

- name: Update /etc/hosts
  become: true
  lineinfile:
    path: /etc/hosts
    regexp: |
      "^127\.0\.1\.1"
    line: "127.0.1.1 {{ hostname_prefix }}-{{ '%02d' | format(play_hosts.index(inventory_hostname)) }}"
    state: present

- name: Update /etc/hostname
  copy:
    content: "{{ hostname_prefix }}-{{ '%02d' | format(play_hosts.index(inventory_hostname)) }}\n"
    dest: /etc/hostname
    owner: root
    group: root
    mode: '0644'

- name: Set hostname with padded zeros
  become: true
  become_user: root
  command: "hostnamectl set-hostname {{ hostname_prefix }}-{{ '%02d' | format(play_hosts.index(inventory_hostname)) }}"
  register: hostname_result
  changed_when: hostname_result.rc == 0
  failed_when: hostname_result.rc != 0

- name: Harden SSH configuration
  become: true
  block:
    - name: Update sshd configuration
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        validate: '/usr/sbin/sshd -t -f %s' # -t test, -f config
      loop:
        - regexp: '^#?PermitRootLogin'
          line: 'PermitRootLogin no'
        - regexp: '^#?PasswordAuthentication'
          line: 'PasswordAuthentication no'
        - regexp: '^#?PubkeyAuthentication'
          line: 'PubkeyAuthentication yes'
        - regexp: '^#?PermitEmptyPasswords'
          line: 'PermitEmptyPasswords no'
        - regexp: '^#?X11Forwarding'
          line: 'X11Forwarding no'
        - regexp: '^#?MaxAuthTries'
          line: 'MaxAuthTries 7'
      notify: Restart sshd

- name: Remove pi user and home directory
  user:
    name: pi
    state: absent
    remove: yes
    force: yes

- name: Replace apt sources.list
  block:
    - name: Copy new sources.list
      copy:
        src: files/sources.list
        dest: /etc/apt/sources.list
        owner: root
        group: root
        mode: '0644'
        force: true

    - name: Update apt cache
      apt:
        update_cache: yes

- name: Set same timezone
  community.general.timezone:
    name: "{{ system_timezone }}"
  when: system_timezone is defined

- name: Perform dist-upgrade
  apt:
    upgrade: dist
    force_apt_get: yes
    update_cache: true
    autoclean: yes
    autoremove: yes
  register: upgrade_output

- name: Reboot system
  reboot:
    msg: "Rebooting due to system updates"
    connect_timeout: 5
    reboot_timeout: 300
    pre_reboot_delay: 0
    post_reboot_delay: 30

# - name: Check if reboot is required
#   stat:
#     path: /var/run/reboot-required
#   notify: Reboot system if required
#   failed_when: false
